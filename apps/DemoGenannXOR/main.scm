;This program is to test the integration of the genann library into the lambdanative framework
;Do with it as you see fit
(display "Genann XOR Test")(newline)
(set! net (genann-init 2 1 2 1))
;(display net)
(random-seed!)
(genann-randomize net)
;(genann-save net "neural.net")
;(define net2 (genann-copy net))
;(genann-save net2 "neural2.net")
(genann-test)
(newline) (newline) (newline)
;;xor trial training
(display "BEFORE TRAINING")
(newline)
(display "0   0  =>  ")
(display (round (vector-ref (genann-run net (vector 0 0)) 0))) (newline)
(display "0   1  =>  ")
(display (round (vector-ref (genann-run net (vector 0 1)) 0))) (newline)
(display "1   0  =>  ")
(display (round (vector-ref (genann-run net (vector 1 0)) 0))) (newline)
(display "1   1  =>  ")
(display (round (vector-ref (genann-run net (vector 1 1)) 0))) (newline) (newline)
(display "Training for 10000 loops!...") (newline) (newline)
(display "AFTER TRAINING") (newline)
(let loop ((i 0))
	(when (< i 10000)
	(genann-train net (vector 0 0) (vector 0) .3)
	(genann-train net (vector 0 1) (vector 1) .3)
	(genann-train net (vector 1 0) (vector 1) .3)
	(genann-train net (vector 1 1) (vector 0) .3)
(loop (+ i 1)))) (newline)
(display "0   0  =>  ")
(display (round (vector-ref (genann-run net (vector 0 0)) 0))) (newline)
(display "0   1  =>  ")
(display (round (vector-ref (genann-run net (vector 0 1)) 0))) (newline)
(display "1   0  =>  ")
(display (round (vector-ref (genann-run net (vector 1 0)) 0))) (newline)
(display "1   1  =>  ")
(display (round (vector-ref (genann-run net (vector 1 1)) 0))) (newline)
(genann-free net)
